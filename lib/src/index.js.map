{"version":3,"sources":["../../src/index.js"],"names":["Promise","require","requestPromise","URLS","isValidURL","pattern","RegExp","test","str","convertUrlsToPromises","urlsArray","urls","forEach","url","push","catch","console","log","e","message","validateParams","reject","Array","isArray","length","getURLPromise","resolve","promises","all","then","data","response","map","res","error"],"mappings":";;;;;;;;AAAA,IAAMA,UAAUC,QAAQ,UAAR,CAAhB;AACA,IAAMC,iBAAiBD,QAAQ,iBAAR,CAAvB;;AAEO,IAAME,sBAAO,CAChB,uEADgB,EAEhB,sEAFgB,EAGhB,sEAHgB,CAAb;;AAMA,IAAMC,kCAAa,SAAbA,UAAa,MAAO;AAC7B,QAAMC,UAAU,IAAIC,MAAJ,CAAW,sBAAqB;AAC5C,sDADuB,GAC6B;AACpD,iCAFuB,GAEQ;AAC/B,qCAHuB,GAGY;AACnC,8BAJuB,GAIK;AAC5B,wBALY,EAKS,GALT,CAAhB,CAD6B,CAME;AAC/B,WAAO,CAAC,CAACD,QAAQE,IAAR,CAAaC,GAAb,CAAT;AACH,CARM;;AAUA,IAAMC,wDAAwB,SAAxBA,qBAAwB,OAAQ;AACzC,QAAIC,YAAY,EAAhB;AACAC,SAAKC,OAAL,CAAa,eAAO;AAChB,YAAIR,WAAWS,GAAX,CAAJ,EAAqB;AACjBH,sBAAUI,IAAV,CAAeZ,eAAe;AAC1B,0BAAS,KADiB;AAE1B,uBAAOW,GAFmB;AAG1B,wBAAQ;AAHkB,aAAf,EAIZE,KAJY,CAIN;AAAA,uBAAIC,QAAQC,GAAR,UAAmBJ,GAAnB,6BAA8CK,EAAEC,OAAhD,CAAJ;AAAA,aAJM,CAAf;AAMH;AAEJ,KAVD;AAWA,WAAOT,SAAP;AACH,CAdM;AAeP,IAAMU,iBAAiB,SAAjBA,cAAiB,CAACT,IAAD,EAAOU,MAAP,EAAkB;AACrC,QAAI,CAACC,MAAMC,OAAN,CAAcZ,IAAd,CAAL,EAA0B;AACtBU,eAAO,sDAAP;AACH;AACD,QAAIC,MAAMC,OAAN,CAAcZ,IAAd,KAAuBA,KAAKa,MAAL,IAAe,CAA1C,EAA6C;AACzCH,eAAO,yDAAP;AACH;AACJ,CAPD;AAQO,IAAMI,wCAAgB,SAAhBA,aAAgB,OAAQ;AACjC;AACA,WAAO,IAAIzB,OAAJ,CAAY,UAAC0B,OAAD,EAAUL,MAAV,EAAqB;AACpCD,uBAAeT,IAAf,EAAqBU,MAArB;;AAEA,YAAMM,WAAWlB,sBAAsBE,IAAtB,CAAjB;AACA,YAAI,CAACgB,SAASH,MAAd,EAAsB;AAClBH,mBAAO,gCAAP;AACH;AACD,YAAIM,SAASH,MAAT,GAAkB,CAAtB,EAAyB;AACrBxB,oBAAQ4B,GAAR,CAAYD,QAAZ,EACCE,IADD,CACM,oBAAY;AACd,oBAAIC,OAAOC,SAASC,GAAT,CAAa,eAAO;AAC3B,wBAAIC,GAAJ,EACI,oBAAWA,GAAX;AACP,iBAHU,CAAX;AAIAP,wBAAQI,IAAR;AACH,aAPD,EAQCf,KARD,CAQO,iBAAQ;AACXM,uBAAOa,MAAMf,OAAb;AACH,aAVD;AAWH;AACJ,KApBM,CAAP;AAqBH,CAvBM","file":"index.js","sourcesContent":["const Promise = require('bluebird');\nconst requestPromise = require('request-promise');\n\nexport const URLS = [\n    'https://ft-tech-test-example.s3-eu-west-1.amazonaws.com/ftse-fsi.json',\n    'https://ft-tech-test-example.s3-eu-west-1.amazonaws.com/gbp-hkd.json',\n    'https://ft-tech-test-example.s3-eu-west-1.amazonaws.com/gbp-usd.json'\n    ];\n\nexport const isValidURL = str => {\n    const pattern = new RegExp('^(https?:\\\\/\\\\/)?'+ // protocol\n        '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|'+ // domain name\n        '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))'+ // OR ip (v4) address\n        '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*'+ // port and path\n        '(\\\\?[;&a-z\\\\d%_.~+=-]*)?'+ // query string\n        '(\\\\#[-a-z\\\\d_]*)?$','i'); // fragment locator\n    return !!pattern.test(str);\n}\n\nexport const convertUrlsToPromises = urls => {\n    let urlsArray = [];\n    urls.forEach(url => {\n        if (isValidURL(url)) {\n            urlsArray.push(requestPromise({\n                \"method\":\"GET\", \n                \"uri\": url,\n                \"json\": true\n            }).catch(e=> console.log(`URL ${url} failed and error is ${e.message}`))\n            );\n        }\n            \n    });\n    return urlsArray;\n}\nconst validateParams = (urls, reject) => {\n    if (!Array.isArray(urls)) {\n        reject('fm-promise library expects array of URLs to process.');\n    }\n    if (Array.isArray(urls) && urls.length <= 0) {\n        reject('fm-promise library expects at least one URL to process.');\n    }\n}\nexport const getURLPromise = urls => {\n    //validate parameters\n    return new Promise((resolve, reject) => {\n        validateParams(urls, reject);\n\n        const promises = convertUrlsToPromises(urls);\n        if (!promises.length) {\n            reject('Invalid array of URLs provided');\n        }\n        if (promises.length > 0) {\n            Promise.all(promises)\n            .then(response => {\n                let data = response.map(res => {\n                    if (res)\n                        return {...res}\n                });\n                resolve(data);\n            })\n            .catch(error=> {\n                reject(error.message);\n            });\n        }\n    });    \n}\n"]}